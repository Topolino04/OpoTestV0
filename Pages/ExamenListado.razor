@page "/Examenes"
@attribute [Authorize]

@inject ExamenService ExamenesService
@inject XpoService<Tema> TemasService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService

<h3>Examenes</h3>
<div class="row pb-4">
    <DxToolbar>
        <DxToolbarItem RenderStyle="ButtonRenderStyle.Primary" Text="Generar Examen" Click="x =>  PopupVisible = true" />
        <DxToolbarItem Text="Repetir Examen" Click="x => RepetirExamen()" Enabled="ExamenSelected != null" />
        <DxToolbarItem Text="Realizar Examen" Click="x => RelizarExamen()" Enabled="ExamenSelected != null" />
        <DxToolbarItem Text="Borrar Examen" Click="x => BorrarExamen()" />
    </DxToolbar>
</div>
<div class="row">
    <div class="col">
        <DxDataGrid DataAsync="token => ExamenesService.Get(token)"
                    KeyFieldName="Oid"
                    ShowGroupPanel=true
                    PageSize="10"
                    ShowFilterRow=true
                    @bind-SingleSelectedDataRow="ExamenSelected">
            <DxDataGridColumn>
                <DisplayTemplate>
                    @if (context is Examen examen)
                    {
                        @string.Join(" ", examen.Temas.Select(x => x.Nombre));
                    }
                </DisplayTemplate>
            </DxDataGridColumn>
            <DxDataGridDateEditColumn Field=@nameof(Examen.FechaInicio)></DxDataGridDateEditColumn>
            <DxDataGridDateEditColumn Field=@nameof(Examen.FechaFin)></DxDataGridDateEditColumn>
            <DxDataGridColumn>
                <DisplayTemplate>
                    @if (context is Examen examen && examen.Preguntas.Any())
                    {
                        double success = examen.PreguntasCorrectas / (double)examen.TotalPreguntas * 100;
                        double danger = examen.PreguntasIncorrectas / (double)examen.TotalPreguntas * 100;
                        <div class="progress">
                            <div class="progress-bar bg-success" role="progressbar" style="width: @success%"></div>
                            <div class="progress-bar bg-danger" role="progressbar" style="width:  @danger%"></div>
                        </div>
                    }
                </DisplayTemplate>
            </DxDataGridColumn>
        </DxDataGrid>
    </div>
</div>
<DxPopup HeaderText="Generar nuevo Examen" @bind-Visible="PopupVisible" HeaderCssClass="bg-primary text-white" ShowCloseButton="false">
    <ChildContent>
        <DxFormLayout>
            <DxFormLayoutItem Caption="Número de preguntas" ColSpanXs="12">
                <Template>
                    <DxSpinEdit @bind-Value="@NumeroPreguntas"></DxSpinEdit>
                </Template>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Temas" ColSpanXs="12">
                <Template>
                    <DxListBox DataAsync="token => TemasService.Get(token)"
                               TextFieldName="@nameof(Tema.Nombre)"
                               SelectionMode="ListBoxSelectionMode.Multiple"
                               ShowCheckboxes="true"
                               @bind-SelectedItems="@SelectedItems">
                    </DxListBox>
                </Template>
            </DxFormLayoutItem>
        </DxFormLayout>
    </ChildContent>
    <FooterTemplate>
        <DxButton Text="Cancelar" RenderStyleMode="ButtonRenderStyleMode.Text" Click="x => PopupVisible = false" />
        <DxButton Text="Generar" Click="x => GenerarExamen()" />
    </FooterTemplate>
</DxPopup>
@code {

    bool popupVisible = false;
    bool PopupVisible
    {
        get => popupVisible;
        set
        {
            popupVisible = value;
            InvokeAsync(StateHasChanged);
        }
    }

    public Examen examenSelected;
    public Examen ExamenSelected
    {
        get => examenSelected;
        set
        {
            examenSelected = value;
            InvokeAsync(StateHasChanged);
        }
    }

    IEnumerable<Tema> SelectedItems { get; set; }
    int NumeroPreguntas = 80;

    private async void GenerarExamen()
    {
        PopupVisible = false;
        await ExamenesService.GenerarExamen(NumeroPreguntas, SelectedItems.Select(x => x.Oid).ToArray());
        toastService.ShowSuccess("Examen creado con éxito.", "OK");
        StateHasChanged();
    }

    private void RelizarExamen()
    {
        NavigationManager.NavigateTo($"Examenes/{examenSelected.Oid}");
    }

    private async void RepetirExamen()
    {
        await ExamenesService.RepetirExamen(examenSelected.Oid);
        toastService.ShowSuccess("Examen copiado con éxito.", "OK");
        StateHasChanged();
    }

    private async void BorrarExamen()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¿Seguro que quieres borrar el examen?"))
        {
            await ExamenesService.Delete(examenSelected.Oid);
            toastService.ShowSuccess("Examen borrado con éxito.", "OK");
            StateHasChanged();
        }
    }
}
