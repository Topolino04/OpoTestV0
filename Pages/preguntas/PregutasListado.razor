@page "/Preguntas/{TemaOid:int}"
@page "/Preguntas"

@attribute [Authorize]
@inject PreguntaService PreguntaService
@inject XpoService<PlantillaRespuesta> RespuestaService
@inject XpoService<Tema> TemaService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService

<h3>@(TemaFiltro?.DisplayFormat ?? "Todos los temas")</h3>
<DxDataGrid DataAsync="DataAsync" KeyFieldName="Oid" @ref="GridPreguntas"
            SelectionMode="DataGridSelectionMode.MultipleSelectedDataRows"
            @bind-MultipleSelectedDataRows=preguntasSeleccionadas
            ShowFilterRow=true
            ShowPager="true">
    <HeaderTemplate>
        <DxToolbar>
            <DxToolbarItem GroupName="FiltroNuevas" IconCssClass=@((VerNuevas?"fas fa-check-square":"far fa-square")) Text="Solo nuevas" @bind-Checked="VerNuevas" />
            <DxToolbarItem IconCssClass="fas fa-sync" Text="Refrescar" Click="_ => GridPreguntas.Refresh()" />
            <DxToolbarItem IconCssClass="fas fa-filter" Text="Filtro por tema" Click="_ => PopupTemaFiltroVisible=true" />
            <DxToolbarItem CssClass="p-2" Alignment="ToolbarItemAlignment.Right" IconCssClass="fas fa-lg fa-plus" Text="Nueva pregunta" Click="x => InvokeAsync(() => AbrirFormulario())" BeginGroup="true" />
            <DxToolbarItem CssClass="p-2" Alignment="ToolbarItemAlignment.Right" IconCssClass="fas fa-lg fa-file-import" Text="Importar Preguntas" Click="x => { importador.IniciarImportacion(); GridPreguntas.Refresh(); }" />
            <DxToolbarItem CssClass="p-2" Alignment="ToolbarItemAlignment.Right" IconCssClass="fas fa-lg fa-copy" Text="Duplicar seleccionadas" Click="_=> PopupTemaDuplicarVisible = true" />
        </DxToolbar>
    </HeaderTemplate>
    <Columns>
        <DxDataGridColumn Field="Oid" SortIndex="0" SortOrder="DataGridColumnSortOrder.Descending" Visible="false" />
        <DxDataGridColumn Field="Enunciado">
            <DisplayTemplate>
                @if (context is PlantillaPregunta pregunta)
                {
                    <div class="card">
                        <div class="card-body d-flex">
                            <div class="align-self-start">
                                <span class="badge badge-primary align-self-start" style="font-size:1.5rem">@pregunta.Oid</span>
                            </div>
                            <div class="flex-grow-1">
                                <h5 class="mx-2 card-title font-weight-bold">@pregunta.Enunciado</h5>
                            </div>
                            <div class="align-self-start" style="min-width:85px">
                                <DxToolbar CssClass="align-self-start" AdaptivityAutoHideRootItems="false">
                                    <DxToolbarItem IconCssClass="fa fa-lg fa-pencil-alt" Click="x =>InvokeAsync(() =>  AbrirFormulario(pregunta))" />
                                    <DxToolbarItem IconCssClass="fa fa-lg fa-trash" Click="x => InvokeAsync(() => BorrarPregunta(pregunta))" />
                                    <DxToolbarItem IconCssClass="fas fa-lg fa-question" Visible="!string.IsNullOrEmpty(pregunta.Explicacion)" Click="x => InvokeAsync(() => popUpInfo.MostrarAyuda(pregunta.Enunciado, pregunta.Explicacion))" />
                                </DxToolbar>
                            </div>
                        </div>
                        <ul class="list-group list-group-flush">
                            @foreach (PlantillaRespuesta respuesta in pregunta.Respuestas)
                            {
                                <li class="list-group-item d-flex justify-content-between @(respuesta.Correcta ? "list-group-item-primary" : "")">
                                    <span>@respuesta.Texto</span>
                                    <DxToolbar CssClass="align-self-start" AdaptivityAutoHideRootItems="false">
                                        <DxToolbarItem Visible="!string.IsNullOrEmpty(respuesta.Explicacion)" IconCssClass="fas fa-question" Click="x => InvokeAsync(() => popUpInfo.MostrarAyuda(respuesta.Texto, respuesta.Explicacion))" />
                                    </DxToolbar>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </DisplayTemplate>
        </DxDataGridColumn>
    </Columns>
</DxDataGrid>

<PopupInfo @ref="popUpInfo" />

<DxPopup @bind-Visible="PopupFormularioVisible" HeaderText="Pregunta" CssClass="modal-lg" CloseButtonClick="() => PopupFormularioVisible = false">
    <ChildContent>
        <PreguntaFormV2 @ref="Form" OID="ID" />
    </ChildContent>
    <FooterTemplate>
        <div class="text-right">
            <DxButton Text="Cancelar" RenderStyleMode="ButtonRenderStyleMode.Text" Click="x => PopupFormularioVisible = false" />
            <DxButton Text="Guardar" Click="x => InvokeAsync(Guardar)" />
        </div>
    </FooterTemplate>
</DxPopup>

<DxPopup @bind-Visible="PopupTemaDuplicarVisible" HeaderText="Selecciona un tema" CloseButtonClick="() => PopupTemaDuplicarVisible = false">
    <ChildContent>
        @preguntasSeleccionadas.Count() seleccionadas preguntas para duplicar
        <DxTreeView Data="Temas"
                    style="max-height:70vh;overflow-y: auto;"
                    AllowSelectNodes="true"
                    SelectionChanged="e => temaDuplicar = e.NodeInfo.DataItem as Tema"
                    TextExpression=@(dataItem => ((Tema)dataItem).DisplayFormat)
                    ChildrenExpression="@(dataItem => ((Tema)dataItem).Hijos.OrderBy(x => x.Arbol))"
                    HasChildrenExpression="@(dataItem => ((Tema)dataItem).Hijos.Any())" />
    </ChildContent>
    <FooterTemplate>
        <div class="text-right">
            <DxButton Text="Cancelar" RenderStyleMode="ButtonRenderStyleMode.Text" Click="x => PopupTemaDuplicarVisible = false" />
            <DxButton Text="Duplicar" Click="x => DuplicarPreguntas()" />
        </div>
    </FooterTemplate>
</DxPopup>

    @{Tema temaSeleccionado = null;}
<DxPopup @bind-Visible="PopupTemaFiltroVisible" HeaderText="Selecciona un tema" CloseButtonClick="() => PopupTemaFiltroVisible = false">
    <ChildContent>
        <DxTreeView Data="Temas"
                    style="max-height:70vh;overflow-y: auto;"
                    AllowSelectNodes="true"
                    SelectionChanged="e => temaSeleccionado = e.NodeInfo.DataItem as Tema"
                    TextExpression=@(dataItem => ((Tema)dataItem).DisplayFormat)
                    ChildrenExpression="@(dataItem => ((Tema)dataItem).Hijos.OrderBy(x => x.Arbol))"
                    HasChildrenExpression="@(dataItem => ((Tema)dataItem).Hijos.Any())" />
    </ChildContent>
    <FooterTemplate>
        <div class="text-right">
            <DxButton Text="Cancelar" RenderStyleMode="ButtonRenderStyleMode.Text" Click="x => PopupTemaDuplicarVisible = false" />
            <DxButton Text="Filtrar" Click="x =>  { TemaFiltro = temaSeleccionado; PopupTemaFiltroVisible=false;}" />
        </div>
    </FooterTemplate>
</DxPopup>

<PreguntasImportador @ref="importador" Tema="TemaFiltro" />

@code {
    PopupInfo popUpInfo;
    PreguntasImportador importador;

    PreguntaFormV2 Form;

    bool popupFormularioVisible;
    bool PopupFormularioVisible
    {
        get => popupFormularioVisible;
        set
        {
            if (popupFormularioVisible == value) return;
            popupFormularioVisible = value;
            InvokeAsync(StateHasChanged);
        }
    }
    bool popupTemaVisible;
    bool PopupTemaDuplicarVisible
    {
        get => popupTemaVisible;
        set
        {
            if (popupTemaVisible == value) return;
            if (popupTemaVisible) temaDuplicar = null;
            popupTemaVisible = value;
            InvokeAsync(StateHasChanged);
        }
    }

    bool popupTemaFiltroVisible;
    bool PopupTemaFiltroVisible
    {
        get => popupTemaFiltroVisible;
        set
        {
            if (popupTemaFiltroVisible == value) return;
            popupTemaFiltroVisible = value;
            InvokeAsync(StateHasChanged);
        }
    }

    DxDataGrid<PlantillaPregunta> GridPreguntas;
    [Parameter]
    public int TemaOid { get; set; }

    IQueryable<Tema> Temas;

    Tema temaFiltro, temaDuplicar;
    public Tema TemaFiltro
    {
        get => temaFiltro;
        set
        {
            temaFiltro = value;
            GridPreguntas?.Refresh();
        }
    }


    string filtro;
    string Filtro
    {
        get => filtro;
        set
        {
            if (filtro == value) return;
            filtro = value;
            GridPreguntas.Refresh();
            InvokeAsync(StateHasChanged);
        }
    }

    bool verNuevas;
    bool VerNuevas
    {
        get => verNuevas;
        set
        {
            if (verNuevas == value) return;
            verNuevas = value;
            GridPreguntas.Refresh();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        TemaFiltro = await TemaService.GetByKey(TemaOid);
        Temas = (await TemaService.Get()).Where(x => x.Padre == null).OrderBy(x => x.Arbol).AsQueryable();

    }

    IEnumerable<PlantillaPregunta> preguntasSeleccionadas = new PlantillaPregunta[0];

    async Task<IEnumerable<PlantillaPregunta>> DataAsync(System.Threading.CancellationToken token)
    {
        try
        {
            var query = await PreguntaService.Get();
            if (TemaFiltro != null)
            {
                var temas = temaFiltro.GetAllTemas()
                .Select(x => x.Oid)
                .Append(TemaFiltro.Oid)
                .ToList();
                query = query.Where(x => temas.Contains(x.Tema.Oid));
            }
            if (!string.IsNullOrWhiteSpace(Filtro))
            {
                query = query.Where(x =>
                    (x.Enunciado?.Contains(Filtro, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (x.Explicacion?.Contains(Filtro, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    x.Respuestas.Any(y => (y.Texto?.Contains(Filtro, StringComparison.OrdinalIgnoreCase) ?? false) || (y.Explicacion?.Contains(Filtro, StringComparison.OrdinalIgnoreCase) ?? false))
                );
            }
            if (VerNuevas)
                query = query.Where(x => x.Respuestas.All(y => !y.Correcta) || x.Tema == null);

            return query;
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString(), "Error");
            throw;
        }
    }

    int? ID { get; set; }

    void AbrirFormulario(PlantillaPregunta pregunta = null)
    {

        ID = (pregunta?.Oid);
        PopupFormularioVisible = true;
    }

    async Task Guardar()
    {
        await Form.Guardar();
        PopupFormularioVisible = false;
        await GridPreguntas.Refresh();
    }

    Task OnInitNewRow(int preguntaOid, Dictionary<string, object> values)
    {
        values.Add("Pregunta", preguntaOid);
        return Task.CompletedTask;
    }

    async Task BorrarPregunta(PlantillaPregunta pregunta)
    {
        try
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", $"¿Seguro que quieres borrar la pregunta {pregunta.Oid}?"))
            {
                await PreguntaService.Delete(pregunta.Oid);
                toastService.ShowSuccess("Datos borrados con éxito.", "OK");
                await GridPreguntas.Refresh();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "ERROR");
        }



    }

    void DuplicarPreguntas()
    {
        if (temaDuplicar == null)
        {
            toastService.ShowError("Seleccina un tema");
            return;
        }

        if (!preguntasSeleccionadas.Any())
        {
            toastService.ShowError("Seleccina preguntas");
            return;
        }

        PreguntaService.DuplicarPreguntas(preguntasSeleccionadas, temaDuplicar);

        GridPreguntas.Refresh();
        PopupTemaDuplicarVisible = false;
        toastService.ShowSuccess("Preguntas duplicadas");
            

    }

    public class Datos
    {
        public int? Oid { get; set; }
        public string Enunciado { get; set; }
        public string Explicacion { get; set; }
        public Tema Tema { get; set; }
    }
}
