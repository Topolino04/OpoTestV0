@inject IToastService toastService
@inject IJSRuntime JSRuntime
@inject XpoService<PlantillaPregunta> PreguntaService
@inject XpoService<PlantillaRespuesta> RespuestaService

<DxPopup @bind-Visible="PopUpVisible" CssClass="modal-lg" CloseButtonClick="() => PopUpVisible = false" Scrollable="true">
    <Content>
        @if (DataGridVisible)
        {
            <DxDataGrid Data="data">
                <Columns>
                    <DxDataGridColumn Field="Enunciado" />
                </Columns>
                <RowPreviewTemplate>
                    <ul>
                        <li>@context.DataItem.RespuestaA</li>
                        <li>@context.DataItem.RespuestaB</li>
                        <li>@context.DataItem.RespuestaC</li>
                        <li>@context.DataItem.RespuestaD</li>
                    </ul>
                </RowPreviewTemplate>
            </DxDataGrid>
        }
        else
        {
            <textArea id="@ID" class="w-100" rows="15" />
        }
    </Content>
    <FooterTemplate>
        <DxButton Text="Procesar" Click="x => InvokeAsync(Procesar)" Visible="!DataGridVisible" />
        <DxButton Text="Guardar" Click="x => InvokeAsync(Guardar)" Visible="DataGridVisible" />
    </FooterTemplate>
</DxPopup>

@code {

    List<EditContext> data = new List<EditContext>();

    string ID = Guid.NewGuid().ToString("N");

    bool popUpVisible;
    bool PopUpVisible
    {
        get => popUpVisible;
        set
        {
            if (popUpVisible == value) return;
            popUpVisible = value;
            InvokeAsync(StateHasChanged);
        }
    }

    bool dataGridVisible;
    bool DataGridVisible
    {
        get => dataGridVisible;
        set
        {
            if (dataGridVisible == value) return;
            dataGridVisible = value;
            InvokeAsync(StateHasChanged);
        }
    }

    [Parameter]
    public Tema Tema { get; set; }

    public void IniciarImportacion()
    {
        data.Clear();
        DataGridVisible = false;
        PopUpVisible = true;
    }

    async Task Procesar()
    {
        try
        {
            data.Clear();
            List<string> lines = new List<string>();
            int numLines = await JSRuntime.InvokeAsync<int>("GetValueByID", ID);
            while (numLines > 0)
            {
                var buffer = await JSRuntime.InvokeAsync<string[]>("PopLines");
                numLines -= buffer.Length;
                lines.AddRange(buffer);
            }

            for (int i = 0; i < lines.Count(); i += 5)
            {
                data.Add(new EditContext
                {
                    Enunciado = lines[i],
                    RespuestaA = lines[i + 1].Substring(3),
                    RespuestaB = lines[i + 2].Substring(3),
                    RespuestaC = lines[i + 3].Substring(3),
                    RespuestaD = lines[i + 4].Substring(3),
                });
            }
            DataGridVisible = true;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString(), "Error");
        }
    }

    async Task Guardar()
    {
        try
        {
            foreach (EditContext datos in data)
            {
                var pregunta = await PreguntaService.Add(new { Tema = Tema?.Oid, Enunciado = datos.Enunciado });
                await RespuestaService.Add(new { Pregunta = pregunta.Oid, Texto = datos.RespuestaA.TrimEnd('*'), Correcta = datos.RespuestaA.EndsWith("**") });
                await RespuestaService.Add(new { Pregunta = pregunta.Oid, Texto = datos.RespuestaB.TrimEnd('*'), Correcta = datos.RespuestaB.EndsWith("**") });
                await RespuestaService.Add(new { Pregunta = pregunta.Oid, Texto = datos.RespuestaC.TrimEnd('*'), Correcta = datos.RespuestaC.EndsWith("**") });
                await RespuestaService.Add(new { Pregunta = pregunta.Oid, Texto = datos.RespuestaD.TrimEnd('*'), Correcta = datos.RespuestaD.EndsWith("**") });
            }
            toastService.ShowSuccess("Preguntas generadas", "OK");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString(), "Error");
        }

        finally
        {
            DataGridVisible = false;
            PopUpVisible = false;
            StateHasChanged();
        }

    }

    public class EditContext
    {
        public string Enunciado { get; set; }
        public string RespuestaA { get; set; }
        public string RespuestaB { get; set; }
        public string RespuestaC { get; set; }
        public string RespuestaD { get; set; }
    }

}