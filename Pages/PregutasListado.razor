@page "/Preguntas"

@attribute [Authorize]
@inject XpoService<PlantillaPregunta> PreguntaService
@inject XpoService<PlantillaRespuesta> RespuestaService
@inject XpoService<Tema> TemaService

@inject IJSRuntime JSRuntime;
<h1>Preguntas</h1>


<DxDataGrid DataAsync="token => PreguntaService.Get(token)" KeyFieldName="Oid"
            AllowDataRowSelection=false
            PageSize="10"
            ShowFilterRow=true
            AutoCollapseDetailRow="true"
            ShowDetailRow="true"
            ShowPager="true"
            ShowGroupPanel="true"
            RowUpdatingAsync=@((item, values) => PreguntaService.Update(item.Oid,values))
            RowRemovingAsync=@((item) => PreguntaService.Delete(item.Oid))
            RowInsertingAsync=@((values) => PreguntaService.Add(values))>
    <ChildContent>
        <DxDataGridCommandColumn Width="100px"></DxDataGridCommandColumn>
        <DxDataGridComboBoxColumn Field="Tema.Oid" Caption="Tema" DataAsync="TemaService.Get" TextFieldName=@nameof(Tema.Nombre) ValueFieldName="Oid">
        </DxDataGridComboBoxColumn>
        <DxDataGridColumn Field=@nameof(PlantillaPregunta.Enunciado)></DxDataGridColumn>
        <DxDataGridColumn Field=@nameof(PlantillaPregunta.Explicacion)>
            <EditTemplate Context="context">
                @{
                    var cellEditContext = (CellEditContext)context;
                    var multiLineText = (string)cellEditContext.CellValue;
                }
                <textarea class="form-control" @onchange="@(changeEventArgs => cellEditContext.OnChanged(changeEventArgs.Value))">@multiLineText</textarea>
            </EditTemplate>
        </DxDataGridColumn>
    </ChildContent>
    <DetailRowTemplate>
        <DxDataGrid DataAsync="token => RespuestaService.Get(x => x.Pregunta.Oid == context.Oid)" KeyFieldName="Oid"
                    PageSize=15 ShowFilterRow=false
                    InitNewRow="values => OnInitNewRow(context,values)"
                    RowInsertingAsync=@(values => RespuestaService.Add(values))
                    RowUpdatingAsync=@((item, values) => RespuestaService.Update(item.Oid,values))
                    RowRemovingAsync=@(item => RespuestaService.Delete(item.Oid))
                    >
            <ChildContent>
                <DxDataGridCommandColumn Width="100px" />
                <DxDataGridColumn Field=@nameof(PlantillaRespuesta.Oid) Visible="false"/>
                <DxDataGridColumn Field=@nameof(PlantillaRespuesta.Texto) />
                <DxDataGridCheckBoxColumn Field=@nameof(PlantillaRespuesta.Correcta) />
                <DxDataGridColumn Field=@nameof(PlantillaRespuesta.Explicacion)>
                    <EditTemplate Context="detailContext">
                        @{
                            var cellEditContext = (CellEditContext)detailContext;
                            var multiLineText = (string)cellEditContext.CellValue;
                        }
                        <textarea class="form-control" @onchange="@(changeEventArgs => cellEditContext.OnChanged(changeEventArgs.Value))">@multiLineText</textarea>
                    </EditTemplate>
                </DxDataGridColumn>
            </ChildContent>
        </DxDataGrid>
    </DetailRowTemplate>
</DxDataGrid>


@code {

    private PlantillaPregunta SelectedPregunta { get; set; }

    Task OnInitNewRow (PlantillaPregunta pregunta, Dictionary<string, object> values) {
        values.Add("Pregunta", pregunta.Oid);
        return Task.CompletedTask;
    }

}
