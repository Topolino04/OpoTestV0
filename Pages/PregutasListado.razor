
@page "/Preguntas/{TemaOid:int}"
@page "/Preguntas"

@attribute [Authorize]
@inject XpoService<PlantillaPregunta> PreguntaService
@inject XpoService<PlantillaRespuesta> RespuestaService
@inject XpoService<Tema> TemaService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService

<h1>@(Tema?.DisplayFormat ?? "Todos los temas")</h1>
<DxDataGrid DataAsync="DataAsync" KeyFieldName="Oid" @ref="GridPreguntas"
            SelectionMode="DataGridSelectionMode.None"
            ShowFilterRow=true
            ShowColumnHeaders="false"
            ShowPager="true">
    <HeaderTemplate>
        <DxToolbar>
         
            <DxToolbarItem GroupName="FiltroNuevas" Text="Solo nuevas" @bind-Checked="VerNuevas" />
            <DxToolbarItem BeginGroup="true">
                <Template>
                    <div class="dxbs-textbox">
                        <input type="text" class="form-control" placeholder="Buscar..." @bind-value="Filtro" style="width:400px">
                        <span class="dxbs-feedback">
                            <span class="d-flex pl-2 pr-2" role="button" style="color:gray">
                                <span class="fas fa-search"></span>
                            </span>
                        </span>
                    </div>
                </Template>
            </DxToolbarItem>
            <DxToolbarItem CssClass="p-2" Alignment="ToolbarItemAlignment.Right" IconCssClass="fas fa-lg fa-plus" Text="Nueva pregunta" Click="x => InvokeAsync(() => AbrirFormulario())" BeginGroup="true" />
            <DxToolbarItem CssClass="p-2" Alignment="ToolbarItemAlignment.Right" IconCssClass="fas fa-lg fa-file-import" Text="Importar Preguntas" Click="x => { importador.IniciarImportacion(); GridPreguntas.Refresh(); }" />
        </DxToolbar>
    </HeaderTemplate>
    <Columns>
        <DxDataGridColumn Field="Oid" SortIndex="0" SortOrder="DataGridColumnSortOrder.Descending">
            <DisplayTemplate>
                @if (context is PlantillaPregunta pregunta)
                {
                    <div class="card">
                        <div class="card-body d-flex">
                            <div class="align-self-start">
                                <span class="badge badge-primary align-self-start" style="font-size:1.5rem">@pregunta.Oid</span>
                            </div>
                            <div class="flex-grow-1">
                                <h5 class="mx-2 card-title font-weight-bold">@pregunta.Enunciado</h5>
                            </div>
                            <div class="align-self-start" style="min-width:85px">
                                <DxToolbar CssClass="align-self-start" AdaptivityAutoHideRootItems="false">
                                    <DxToolbarItem IconCssClass="fa fa-lg fa-pencil-alt" Click="x =>InvokeAsync(() =>  AbrirFormulario(pregunta))" />
                                    <DxToolbarItem IconCssClass="fa fa-lg fa-trash" Click="x => InvokeAsync(() => BorrarPregunta(pregunta))" />
                                    <DxToolbarItem IconCssClass="fas fa-lg fa-question" Visible="!string.IsNullOrEmpty(pregunta.Explicacion)" Click="x => InvokeAsync(() => MostrarAyuda(pregunta.Enunciado, pregunta.Explicacion))" />
                                </DxToolbar>
                            </div>
                        </div>
                        <ul class="list-group list-group-flush">
                            @foreach (PlantillaRespuesta respuesta in pregunta.Respuestas)
                            {
                                <li class="list-group-item d-flex justify-content-between @(respuesta.Correcta ? "list-group-item-primary" : "")">
                                    <span>@respuesta.Texto</span>
                                    <DxToolbar CssClass="align-self-start" AdaptivityAutoHideRootItems="false">
                                        <DxToolbarItem Visible="!string.IsNullOrEmpty(respuesta.Explicacion)" IconCssClass="fas fa-question" Click="x => InvokeAsync(() => MostrarAyuda(respuesta.Texto, respuesta.Explicacion))" />
                                    </DxToolbar>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </DisplayTemplate>
        </DxDataGridColumn>
    </Columns>
</DxDataGrid>

<DxPopup @bind-Visible="PopupAyudaVisible" HeaderText="@ayudaTitulo" CssClass="modal-lg" CloseButtonClick="() => PopupAyudaVisible = false">
    <ChildContent>
        <BlazoredTextEditor ReadOnly="true" Theme="bubble">
            <EditorContent>
                @(new MarkupString(ayudaContent))
            </EditorContent>
        </BlazoredTextEditor>
    </ChildContent>
</DxPopup>

<DxPopup @bind-Visible="PopupFormularioVisible" HeaderText="Pregunta" CssClass="modal-lg" CloseButtonClick="() => PopupFormularioVisible = false">
    <ChildContent>
        <DxFormLayout>
            <DxFormLayoutItem Caption="Tema:" ColSpanMd="12">
                <Template>
                    <DxComboBox @bind-SelectedItem=datos.Tema DataAsync="x => TemaService.Get(x)" TextFieldName="DisplayFormat" />
                </Template>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Enunciado:" ColSpanMd="12" Field="Enunciado">
                <Template>
                    <DxTextBox @bind-Text="datos.Enunciado" />
                </Template>
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanMd="12" Visible="datos.Oid.HasValue">
                <Template>
                    <DxDataGrid DataAsync="(token => RespuestaService.Get(x => x.Pregunta.Oid == datos?.Oid,token))" KeyFieldName="Oid"
                                PageSize=15 ShowFilterRow=false
                                InitNewRow=@(values => OnInitNewRow(datos.Oid.Value, values))
                                RowInsertingAsync=@(values => RespuestaService.Add(values))
                                RowUpdatingAsync=@((item, values) => RespuestaService.Update(item.Oid, values))
                                RowRemovingAsync=@(item => RespuestaService.Delete(item.Oid))>
                        <Columns>
                            <DxDataGridCommandColumn Width="100px" />
                            <DxDataGridColumn Field=@nameof(PlantillaRespuesta.Oid) Visible="false" SortOrder="DataGridColumnSortOrder.Descending" />
                            <DxDataGridCheckBoxColumn Field=@nameof(PlantillaRespuesta.Correcta) Width="50px" />
                            <DxDataGridColumn Field=@nameof(PlantillaRespuesta.Texto) Caption="Respuesta" />
                            <DxDataGridColumn Field=@nameof(PlantillaRespuesta.Explicacion) Caption="Explicación" Visible="false" EditorVisible="DefaultBoolean.True" />
                        </Columns>
                        <RowPreviewTemplate Context="preview">
                            @if (!string.IsNullOrEmpty(preview.DataItem.Explicacion))
                            {
                                <BlazoredTextEditor ReadOnly="true" Theme="bubble">
                                    <EditorContent>
                                        updartwe
                                        @(new MarkupString(preview.DataItem.Explicacion))
                                    </EditorContent>
                                </BlazoredTextEditor>
                            }
                        </RowPreviewTemplate>
                    </DxDataGrid>
                </Template>
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanMd="12">
                <Template>
                    <div class="w-100 d-flex flex-column">
                        <BlazoredTextEditor @ref="TextEditor" Placeholder="Explicación">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                                @(new MarkupString(datos.Explicacion))
                            </EditorContent>
                        </BlazoredTextEditor>
                    </div>
                </Template>
            </DxFormLayoutItem>
        </DxFormLayout>
    </ChildContent>
    <FooterTemplate>
        <div class="text-right">
            <DxButton Text="Cancelar" RenderStyleMode="ButtonRenderStyleMode.Text" Click="x => PopupFormularioVisible = false" />
            <DxButton Text="Guardar" Click="x => InvokeAsync(Guardar)" />
        </div>
    </FooterTemplate>
</DxPopup>


<OpoTest.Pages.PreguntasImportador @ref="importador" Tema="Tema" />



@code {
    OpoTest.Pages.PreguntasImportador importador;

    BlazoredTextEditor TextEditor;
    BlazoredTextEditor TextEditorLinea;

    string ayudaContent;
    string ayudaTitulo;

    bool popupAyudaVisible;
    bool PopupAyudaVisible
    {
        get => popupAyudaVisible;
        set
        {
            if (popupAyudaVisible == value) return;
            popupAyudaVisible = value;
            InvokeAsync(StateHasChanged);
        }
    }

    bool popupFormularioVisible;
    bool PopupFormularioVisible
    {
        get => popupFormularioVisible;
        set
        {
            if (popupFormularioVisible == value) return;
            popupFormularioVisible = value;
            InvokeAsync(StateHasChanged);
        }
    }

    bool popupTemasVisible;
    bool PopupTemasVisible
    {
        get => popupTemasVisible;
        set
        {
            if (popupTemasVisible == value) return;
            popupTemasVisible = value;
            InvokeAsync(StateHasChanged);
        }
    }

    DxDataGrid<PlantillaPregunta> GridPreguntas;
    [Parameter]
    public int TemaOid { get; set; }
    public Tema Tema { get; set; }

    string filtro;
    string Filtro
    {
        get => filtro;
        set
        {
            if (filtro == value) return;
            filtro = value;
            InvokeAsync(StateHasChanged);
        }
    }

    bool verNuevas;
    bool VerNuevas
    {
        get => verNuevas;
        set
        {
            if (verNuevas == value) return;
            verNuevas = value;
            InvokeAsync(StateHasChanged);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        Tema = await TemaService.GetByKey(TemaOid);
    }

    async Task<IEnumerable<PlantillaPregunta>> DataAsync(System.Threading.CancellationToken token)
    {
        try
        {
            var query = await PreguntaService.Get();
            if (TemaOid != 0)
            {
                var t = await TemaService.GetByKey(TemaOid);
                List<int> temas = new List<int> { TemaOid };
                temas.AddRange(t.AllTemas.Select(x => x.Oid));
                query = query.Where(x => temas.Contains(x.Tema.Oid));
            }
            if (!string.IsNullOrWhiteSpace(Filtro))
            {
                query = query.Where(x =>
                    (x.Enunciado?.Contains(Filtro, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (x.Explicacion?.Contains(Filtro, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    x.Respuestas.Any(y => (y.Texto?.Contains(Filtro, StringComparison.OrdinalIgnoreCase) ?? false) || (y.Explicacion?.Contains(Filtro, StringComparison.OrdinalIgnoreCase) ?? false))
                );
            }
            if (VerNuevas)
                query = query.Where(x => x.Respuestas.All(y => !y.Correcta) || x.Tema == null);

            return query;
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Error");
            throw;
        }
    }

    void MostrarAyuda(string titulo, string ayuda)
    {
        ayudaTitulo = titulo;
        ayudaContent = ayuda;
        PopupAyudaVisible = true;
    }

    Datos datos { get; set; }

    void AbrirFormulario(PlantillaPregunta pregunta = null)
    {
        datos = new Datos
        {
            Oid = pregunta?.Oid,
            Enunciado = pregunta?.Enunciado,
            Explicacion = pregunta?.Explicacion,
            Tema = pregunta?.Tema ?? Tema,
        };
        PopupFormularioVisible = true;
    }

    async Task Guardar()
    {
        try
        {
            datos.Explicacion = await TextEditor.GetHTML();
            if (datos.Oid.HasValue)
            {
                await PreguntaService.Update(datos.Oid.Value,
                    new Dictionary<string, object>
                    {
                        {"Enunciado", datos.Enunciado },
                        {"Explicacion", datos?.Explicacion},
                        {"Tema", datos.Tema.Oid}
                            });
            }
            else
            {
                await PreguntaService.Add(
                    new Dictionary<string, object>
                    {
                        {"Enunciado", datos.Enunciado},
                        {"Explicacion", datos.Explicacion},
                        {"Tema", datos.Tema.Oid}
                            });
            }
            toastService.ShowSuccess("Datos guardados con éxito.", "OK");
            PopupFormularioVisible = false;
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "ERROR");
        }
    }

    Task OnInitNewRow(int preguntaOid, Dictionary<string, object> values)
    {
        values.Add("Pregunta", preguntaOid);
        return Task.CompletedTask;
    }

    async Task BorrarPregunta(PlantillaPregunta pregunta)
    {
        try
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", $"¿Seguro que quieres borrar la pregunta {pregunta.Oid}?"))
            {
                await PreguntaService.Delete(pregunta.Oid);
                toastService.ShowSuccess("Datos borrados con éxito.", "OK");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "ERROR");
        }
    }

    public class Datos
    {
        public int? Oid { get; set; }
        public string Enunciado { get; set; }
        public string Explicacion { get; set; }
        public Tema Tema { get; set; }
    }
}
