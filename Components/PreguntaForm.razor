@attribute [Authorize]
@inject XpoService<PlantillaPregunta> PreguntaService
@inject XpoService<PlantillaRespuesta> RespuestaService
@inject XpoService<Tema> TemaService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService


<DxFormLayout>
    <DxFormLayoutItem Caption="Tema:" ColSpanMd="12">
        <Template>
            <DxComboBox @bind-SelectedItem=datos.Tema DataAsync="x => TemaService.Get(x)" TextFieldName="DisplayFormat" />
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Enunciado:" ColSpanMd="12" Field="Enunciado">
        <Template>
            <DxTextBox @bind-Text="datos.Enunciado" />
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem ColSpanMd="12" Visible="datos.Oid.HasValue">
        <Template>
            <DxDataGrid DataAsync="(token => RespuestaService.Get(x => x.Pregunta.Oid == datos?.Oid,token))" KeyFieldName="Oid"
                        PageSize=15 ShowFilterRow=false
                        InitNewRow=@(values => OnInitNewRow(datos.Oid.Value, values))
                        RowInsertingAsync=@(values => RespuestaService.Add(values))
                        RowUpdatingAsync=@((item, values) => RespuestaService.Update(item.Oid, values))
                        RowRemovingAsync=@(item => RespuestaService.Delete(item.Oid))>
                <Columns>
                    <DxDataGridCommandColumn Width="100px" />
                    <DxDataGridColumn Field=@nameof(PlantillaRespuesta.Oid) Visible="false" SortOrder="DataGridColumnSortOrder.Descending" />
                    <DxDataGridCheckBoxColumn Field=@nameof(PlantillaRespuesta.Correcta) Width="50px" />
                    <DxDataGridColumn Field=@nameof(PlantillaRespuesta.Texto) Caption="Respuesta" />
                    <DxDataGridColumn Field=@nameof(PlantillaRespuesta.Explicacion) Caption="Explicación" Visible="false" EditorVisible="DefaultBoolean.True" />
                </Columns>
                <RowPreviewTemplate Context="preview">
                    @if (!string.IsNullOrEmpty(preview.DataItem.Explicacion))
                    {
                        <BlazoredTextEditor ReadOnly="true" Theme="bubble">
                            <EditorContent>
                                updartwe
                                @(new MarkupString(preview.DataItem.Explicacion))
                            </EditorContent>
                        </BlazoredTextEditor>
                    }
                </RowPreviewTemplate>
            </DxDataGrid>
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem ColSpanMd="12">
        <Template>
            <div class="w-100 d-flex flex-column">
                <BlazoredTextEditor @ref="TextEditor" Placeholder="Explicación">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent>
                        @(new MarkupString(datos.Explicacion))
                    </EditorContent>
                </BlazoredTextEditor>
            </div>
        </Template>
    </DxFormLayoutItem>
</DxFormLayout>



@code {
    BlazoredTextEditor TextEditor;
    BlazoredTextEditor TextEditorLinea;

    protected override async Task OnInitializedAsync()
    {

    }

    Pregunta datos { get; set; }

    void AbrirFormulario(PlantillaPregunta pregunta = null)
    {
        datos = new Pregunta
        {
            Oid = pregunta?.Oid,
            Enunciado = pregunta?.Enunciado,
            Explicacion = pregunta?.Explicacion,
            Tema = pregunta?.Tema,
        };
        StateHasChanged();
    }

    async Task Guardar()
    {
        try
        {
            datos.Explicacion = await TextEditor.GetHTML();
            if (datos.Oid.HasValue)
            {
                await PreguntaService.Update(datos.Oid.Value,
                    new Dictionary<string, object>
                    {
                        {"Enunciado", datos.Enunciado },
                        {"Explicacion", datos?.Explicacion},
                        {"Tema", datos.Tema.Oid}
                                                });
            }
            else
            {
                await PreguntaService.Add(
                    new Dictionary<string, object>
                    {
                        {"Enunciado", datos.Enunciado},
                        {"Explicacion", datos.Explicacion},
                        {"Tema", datos.Tema.Oid}
                                                });
            }
            toastService.ShowSuccess("Datos guardados con éxito.", "OK");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "ERROR");
        }
    }

    Task OnInitNewRow(int preguntaOid, Dictionary<string, object> values)
    {
        values.Add("Pregunta", preguntaOid);
        return Task.CompletedTask;
    }


    public class Pregunta
    {
        public int? Oid { get; set; }
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string Enunciado { get; set; }
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Explicacion { get; set; }
        public Tema Tema { get; set; }
        public List<Opcion> Opcions { get; } = new List<Opcion>();
    }

    public class Opcion
    {
        public int? Oid { get; set; }
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string Enunciado { get; set; }
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Explicacion { get; set; }
    }
}
